{"ast":null,"code":"var _jsxFileName = \"/Users/tyler/Desktop/fullstack-assessment/stock-portfolio/client/src/context/alert/AlertState.js\";\nimport React, { useReducer } from 'react';\nimport AlertReducer from './alertReducer';\nimport AlertContext from './alertContext';\nimport uuid from 'uuid';\nimport { SET_ALERT, REMOVE_ALERT } from '../types';\n\nconst AuthState = props => {\n  const initialState = [];\n  const [state, dispatch] = useReducer(AlertReducer, initialState); // Set Alert\n\n  const setAlert = (message, type, timeoutLength = 500000) => {\n    // creates a random id\n    const id = uuid.v4();\n    dispatch({\n      type: SET_ALERT,\n      payload: {\n        message,\n        type,\n        id\n      }\n    }); // have the alert disappear after a certain amount of time\n\n    setTimeout(() => dispatch({\n      type: REMOVE_ALERT,\n      payload: id\n    }), timeoutLength);\n  };\n\n  return React.createElement(AlertContext.Provider, {\n    value: {\n      alerts: state,\n      setAlert\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default AuthState;","map":{"version":3,"sources":["/Users/tyler/Desktop/fullstack-assessment/stock-portfolio/client/src/context/alert/AlertState.js"],"names":["React","useReducer","AlertReducer","AlertContext","uuid","SET_ALERT","REMOVE_ALERT","AuthState","props","initialState","state","dispatch","setAlert","message","type","timeoutLength","id","v4","payload","setTimeout","alerts","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,SAAT,EAAoBC,YAApB,QAAwC,UAAxC;;AAEA,MAAMC,SAAS,GAAGC,KAAK,IAAI;AACzB,QAAMC,YAAY,GAAG,EAArB;AAEA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,UAAU,CAACC,YAAD,EAAeO,YAAf,CAApC,CAHyB,CAKzB;;AACA,QAAMG,QAAQ,GAAG,CAACC,OAAD,EAAUC,IAAV,EAAgBC,aAAa,GAAG,MAAhC,KAA2C;AAC1D;AACA,UAAMC,EAAE,GAAGZ,IAAI,CAACa,EAAL,EAAX;AAEAN,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAET,SADC;AAEPa,MAAAA,OAAO,EAAE;AAAEL,QAAAA,OAAF;AAAWC,QAAAA,IAAX;AAAiBE,QAAAA;AAAjB;AAFF,KAAD,CAAR,CAJ0D,CAS1D;;AACAG,IAAAA,UAAU,CAAC,MAAMR,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAER,YAAR;AAAsBY,MAAAA,OAAO,EAAEF;AAA/B,KAAD,CAAf,EAAsDD,aAAtD,CAAV;AACD,GAXD;;AAaA,SACE,oBAAC,YAAD,CAAc,QAAd;AACE,IAAA,KAAK,EAAE;AACLK,MAAAA,MAAM,EAAEV,KADH;AAELE,MAAAA;AAFK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGJ,KAAK,CAACa,QANT,CADF;AAUD,CA7BD;;AA+BA,eAAed,SAAf","sourcesContent":["import React, { useReducer } from 'react';\nimport AlertReducer from './alertReducer';\nimport AlertContext from './alertContext';\nimport uuid from 'uuid';\nimport { SET_ALERT, REMOVE_ALERT } from '../types';\n\nconst AuthState = props => {\n  const initialState = [];\n\n  const [state, dispatch] = useReducer(AlertReducer, initialState);\n\n  // Set Alert\n  const setAlert = (message, type, timeoutLength = 500000) => {\n    // creates a random id\n    const id = uuid.v4();\n\n    dispatch({\n      type: SET_ALERT,\n      payload: { message, type, id }\n    });\n\n    // have the alert disappear after a certain amount of time\n    setTimeout(() => dispatch({ type: REMOVE_ALERT, payload: id }), timeoutLength);\n  };\n\n  return (\n    <AlertContext.Provider\n      value={{\n        alerts: state,\n        setAlert\n      }}\n    >\n      {props.children}\n    </AlertContext.Provider>\n  );\n};\n\nexport default AuthState;\n"]},"metadata":{},"sourceType":"module"}