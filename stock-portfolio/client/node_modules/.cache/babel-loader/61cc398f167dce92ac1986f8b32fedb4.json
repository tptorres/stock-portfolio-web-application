{"ast":null,"code":"var _jsxFileName = \"/Users/tyler/Desktop/fullstack-assessment/stock-portfolio/client/src/context/stock/StockState.js\";\nimport React, { useReducer } from 'react';\nimport StockReducer from './stockReducer';\nimport StockContext from './stockContext';\nimport { ADD_STOCK, UPDATE_STOCK, SET_CURRENT } from '../types';\n\nconst StockState = props => {\n  const initialState = {\n    currentCash: 5000,\n    portfolioCash: 0,\n    currentStocks: [{\n      symbol: 'AAPL',\n      shareAmount: 7,\n      // sharePrice is the current price, has to be red or green if it is over/under open price\n      sharePrice: 2000\n    }, {\n      symbol: 'AMZN',\n      shareAmount: 7,\n      sharePrice: 5000\n    }, {\n      symbol: 'MSFT',\n      shareAmount: 7,\n      sharePrice: 300\n    }],\n    stockToUpdate: null\n  };\n  const [state, dispatch] = useReducer(StockReducer, initialState); // Add Stock\n  // Have to add the stocks current price in BuyStock\n\n  const addStock = stock => {\n    dispatch({\n      type: ADD_STOCK,\n      payload: stock\n    });\n  }; // Update Stock\n\n\n  const updateStock = newStock => {\n    dispatch({\n      type: UPDATE_STOCK,\n      payload: newStock\n    });\n  };\n\n  const setCurrent = symbol => {\n    dispatch({\n      type: SET_CURRENT,\n      payload: symbol\n    });\n  };\n  /*  Helpers */\n  // Check if Stock exists\n\n\n  const stockExists = symbol => {\n    var stockExists = state.currentStocks.some(stock => {\n      return symbol == stock.symbol;\n    });\n    return stockExists;\n  }; // set stockToUpdate and remove updated stock from list ; keep immutability\n\n\n  return React.createElement(StockContext.Provider, {\n    value: {\n      currentCash: state.currentCash,\n      portfolioCash: state.portfolioCash,\n      currentStocks: state.currentStocks,\n      currentStock: state.currentStock,\n      stockToUpdate: state.stockToUpdate,\n      addStock,\n      stockExists,\n      updateStock,\n      setCurrent\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default StockState;","map":{"version":3,"sources":["/Users/tyler/Desktop/fullstack-assessment/stock-portfolio/client/src/context/stock/StockState.js"],"names":["React","useReducer","StockReducer","StockContext","ADD_STOCK","UPDATE_STOCK","SET_CURRENT","StockState","props","initialState","currentCash","portfolioCash","currentStocks","symbol","shareAmount","sharePrice","stockToUpdate","state","dispatch","addStock","stock","type","payload","updateStock","newStock","setCurrent","stockExists","some","currentStock","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,SAAT,EAAoBC,YAApB,EAAkCC,WAAlC,QAAqD,UAArD;;AAEA,MAAMC,UAAU,GAAGC,KAAK,IAAI;AAC1B,QAAMC,YAAY,GAAG;AACnBC,IAAAA,WAAW,EAAE,IADM;AAEnBC,IAAAA,aAAa,EAAE,CAFI;AAGnBC,IAAAA,aAAa,EAAE,CACb;AACEC,MAAAA,MAAM,EAAE,MADV;AAEEC,MAAAA,WAAW,EAAE,CAFf;AAGE;AACAC,MAAAA,UAAU,EAAE;AAJd,KADa,EAOb;AACEF,MAAAA,MAAM,EAAE,MADV;AAEEC,MAAAA,WAAW,EAAE,CAFf;AAGEC,MAAAA,UAAU,EAAE;AAHd,KAPa,EAYb;AACEF,MAAAA,MAAM,EAAE,MADV;AAEEC,MAAAA,WAAW,EAAE,CAFf;AAGEC,MAAAA,UAAU,EAAE;AAHd,KAZa,CAHI;AAqBnBC,IAAAA,aAAa,EAAE;AArBI,GAArB;AAwBA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBjB,UAAU,CAACC,YAAD,EAAeO,YAAf,CAApC,CAzB0B,CA2B1B;AACA;;AACA,QAAMU,QAAQ,GAAGC,KAAK,IAAI;AACxBF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEjB,SAAR;AAAmBkB,MAAAA,OAAO,EAAEF;AAA5B,KAAD,CAAR;AACD,GAFD,CA7B0B,CAiC1B;;;AACA,QAAMG,WAAW,GAAGC,QAAQ,IAAI;AAC9BN,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEhB,YAAR;AAAsBiB,MAAAA,OAAO,EAAEE;AAA/B,KAAD,CAAR;AACD,GAFD;;AAIA,QAAMC,UAAU,GAAGZ,MAAM,IAAI;AAC3BK,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEf,WADC;AAEPgB,MAAAA,OAAO,EAAET;AAFF,KAAD,CAAR;AAID,GALD;AAOA;AAEA;;;AACA,QAAMa,WAAW,GAAGb,MAAM,IAAI;AAC5B,QAAIa,WAAW,GAAGT,KAAK,CAACL,aAAN,CAAoBe,IAApB,CAAyBP,KAAK,IAAI;AAClD,aAAOP,MAAM,IAAIO,KAAK,CAACP,MAAvB;AACD,KAFiB,CAAlB;AAGA,WAAOa,WAAP;AACD,GALD,CAhD0B,CAuD1B;;;AAEA,SACE,oBAAC,YAAD,CAAc,QAAd;AACE,IAAA,KAAK,EAAE;AACLhB,MAAAA,WAAW,EAAEO,KAAK,CAACP,WADd;AAELC,MAAAA,aAAa,EAAEM,KAAK,CAACN,aAFhB;AAGLC,MAAAA,aAAa,EAAEK,KAAK,CAACL,aAHhB;AAILgB,MAAAA,YAAY,EAAEX,KAAK,CAACW,YAJf;AAKLZ,MAAAA,aAAa,EAAEC,KAAK,CAACD,aALhB;AAMLG,MAAAA,QANK;AAOLO,MAAAA,WAPK;AAQLH,MAAAA,WARK;AASLE,MAAAA;AATK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAaGjB,KAAK,CAACqB,QAbT,CADF;AAiBD,CA1ED;;AA4EA,eAAetB,UAAf","sourcesContent":["import React, { useReducer } from 'react';\nimport StockReducer from './stockReducer';\nimport StockContext from './stockContext';\nimport { ADD_STOCK, UPDATE_STOCK, SET_CURRENT } from '../types';\n\nconst StockState = props => {\n  const initialState = {\n    currentCash: 5000,\n    portfolioCash: 0,\n    currentStocks: [\n      {\n        symbol: 'AAPL',\n        shareAmount: 7,\n        // sharePrice is the current price, has to be red or green if it is over/under open price\n        sharePrice: 2000\n      },\n      {\n        symbol: 'AMZN',\n        shareAmount: 7,\n        sharePrice: 5000\n      },\n      {\n        symbol: 'MSFT',\n        shareAmount: 7,\n        sharePrice: 300\n      }\n    ],\n    stockToUpdate: null\n  };\n\n  const [state, dispatch] = useReducer(StockReducer, initialState);\n\n  // Add Stock\n  // Have to add the stocks current price in BuyStock\n  const addStock = stock => {\n    dispatch({ type: ADD_STOCK, payload: stock });\n  };\n\n  // Update Stock\n  const updateStock = newStock => {\n    dispatch({ type: UPDATE_STOCK, payload: newStock });\n  };\n\n  const setCurrent = symbol => {\n    dispatch({\n      type: SET_CURRENT,\n      payload: symbol\n    });\n  };\n\n  /*  Helpers */\n\n  // Check if Stock exists\n  const stockExists = symbol => {\n    var stockExists = state.currentStocks.some(stock => {\n      return symbol == stock.symbol;\n    });\n    return stockExists;\n  };\n\n  // set stockToUpdate and remove updated stock from list ; keep immutability\n\n  return (\n    <StockContext.Provider\n      value={{\n        currentCash: state.currentCash,\n        portfolioCash: state.portfolioCash,\n        currentStocks: state.currentStocks,\n        currentStock: state.currentStock,\n        stockToUpdate: state.stockToUpdate,\n        addStock,\n        stockExists,\n        updateStock,\n        setCurrent\n      }}\n    >\n      {props.children}\n    </StockContext.Provider>\n  );\n};\n\nexport default StockState;\n"]},"metadata":{},"sourceType":"module"}