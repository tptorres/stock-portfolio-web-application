{"ast":null,"code":"var _jsxFileName = \"/Users/tyler/Desktop/fullstack-assessment/stock-portfolio/client/src/context/stock/StockState.js\";\nimport React, { useReducer } from 'react';\nimport StockReducer from './stockReducer';\nimport StockContext from './stockContext';\nimport { ADD_STOCK, UPDATE_STOCK } from '../types';\n\nconst StockState = props => {\n  const initialState = {\n    currentCash: 5000,\n    currentStocks: [{\n      symbol: 'AAPL',\n      shareAmount: 7,\n      // sharePrice is the current price, has to be red or green if it is over/under open price\n      sharePrice: 2000\n    }, {\n      symbol: 'AMZN',\n      shareAmount: 7,\n      sharePrice: 5000\n    }, {\n      symbol: 'MSFT',\n      shareAmount: 7,\n      sharePrice: 300\n    }],\n    current: null\n  };\n  const [state, dispatch] = useReducer(StockReducer, initialState); // Add Stock\n\n  const addStock = stock => {\n    dispatch({\n      type: ADD_STOCK,\n      payload: stock\n    });\n  };\n\n  const updateStock = modifiedStock => {\n    for (var i = 0; i < state.currentStocks.length; i++) {\n      if (modifiedStock.symbol === state.currentStocks[i].symbol) {\n        state.currentStocks[i].shareAmount += Number(modifiedStock.shareAmount);\n        break;\n      }\n    } // Force the rerender of the newly computed # of shares\n\n\n    dispatch({\n      type: UPDATE_STOCK\n    });\n  }; // Helpers\n  // Check if Stock exists\n  // Change to for loop\n\n\n  const stockExists = symbol => {\n    var flag = false;\n    state.currentStocks.map(stock => {\n      if (symbol === stock.symbol) {\n        flag = true;\n      }\n    });\n    return flag;\n  };\n\n  return React.createElement(StockContext.Provider, {\n    value: {\n      currentCash: state.currentCash,\n      currentStocks: state.currentStocks,\n      addStock,\n      stockExists,\n      updateStock\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default StockState;","map":{"version":3,"sources":["/Users/tyler/Desktop/fullstack-assessment/stock-portfolio/client/src/context/stock/StockState.js"],"names":["React","useReducer","StockReducer","StockContext","ADD_STOCK","UPDATE_STOCK","StockState","props","initialState","currentCash","currentStocks","symbol","shareAmount","sharePrice","current","state","dispatch","addStock","stock","type","payload","updateStock","modifiedStock","i","length","Number","stockExists","flag","map","children"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAAQC,SAAR,EAAmBC,YAAnB,QAAsC,UAAtC;;AAEA,MAAMC,UAAU,GAAGC,KAAK,IAAI;AAC1B,QAAMC,YAAY,GAAG;AACnBC,IAAAA,WAAW,EAAE,IADM;AAEnBC,IAAAA,aAAa,EAAE,CACb;AACEC,MAAAA,MAAM,EAAE,MADV;AAEEC,MAAAA,WAAW,EAAE,CAFf;AAGE;AACAC,MAAAA,UAAU,EAAE;AAJd,KADa,EAOb;AACEF,MAAAA,MAAM,EAAE,MADV;AAEEC,MAAAA,WAAW,EAAE,CAFf;AAGEC,MAAAA,UAAU,EAAE;AAHd,KAPa,EAYb;AACEF,MAAAA,MAAM,EAAE,MADV;AAEEC,MAAAA,WAAW,EAAE,CAFf;AAGEC,MAAAA,UAAU,EAAE;AAHd,KAZa,CAFI;AAoBnBC,IAAAA,OAAO,EAAE;AApBU,GAArB;AAuBA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBf,UAAU,CAACC,YAAD,EAAeM,YAAf,CAApC,CAxB0B,CA0B1B;;AACA,QAAMS,QAAQ,GAAGC,KAAK,IAAI;AACxBF,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEf,SADC;AAEPgB,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAID,GALD;;AAOA,QAAMG,WAAW,GAAGC,aAAa,IAAI;AACnC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,KAAK,CAACL,aAAN,CAAoBc,MAAxC,EAAgDD,CAAC,EAAjD,EAAqD;AACnD,UAAID,aAAa,CAACX,MAAd,KAAyBI,KAAK,CAACL,aAAN,CAAoBa,CAApB,EAAuBZ,MAApD,EAA4D;AAC1DI,QAAAA,KAAK,CAACL,aAAN,CAAoBa,CAApB,EAAuBX,WAAvB,IAAsCa,MAAM,CAACH,aAAa,CAACV,WAAf,CAA5C;AACA;AACD;AACF,KANkC,CAOnC;;;AACAI,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEd;AADC,KAAD,CAAR;AAGD,GAXD,CAlC0B,CA+C1B;AACA;AAEA;;;AACA,QAAMqB,WAAW,GAAGf,MAAM,IAAI;AAC5B,QAAIgB,IAAI,GAAG,KAAX;AACAZ,IAAAA,KAAK,CAACL,aAAN,CAAoBkB,GAApB,CAAwBV,KAAK,IAAI;AAC/B,UAAIP,MAAM,KAAKO,KAAK,CAACP,MAArB,EAA6B;AAC3BgB,QAAAA,IAAI,GAAG,IAAP;AACD;AACF,KAJD;AAKA,WAAOA,IAAP;AACD,GARD;;AAUA,SACE,oBAAC,YAAD,CAAc,QAAd;AACE,IAAA,KAAK,EAAE;AACLlB,MAAAA,WAAW,EAAEM,KAAK,CAACN,WADd;AAELC,MAAAA,aAAa,EAAEK,KAAK,CAACL,aAFhB;AAGLO,MAAAA,QAHK;AAILS,MAAAA,WAJK;AAKLL,MAAAA;AALK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASGd,KAAK,CAACsB,QATT,CADF;AAaD,CA1ED;;AA4EA,eAAevB,UAAf","sourcesContent":["import React, {useReducer} from 'react';\nimport StockReducer from './stockReducer';\nimport StockContext from './stockContext';\nimport {ADD_STOCK, UPDATE_STOCK} from '../types';\n\nconst StockState = props => {\n  const initialState = {\n    currentCash: 5000,\n    currentStocks: [\n      {\n        symbol: 'AAPL',\n        shareAmount: 7,\n        // sharePrice is the current price, has to be red or green if it is over/under open price\n        sharePrice: 2000\n      },\n      {\n        symbol: 'AMZN',\n        shareAmount: 7,\n        sharePrice: 5000\n      },\n      {\n        symbol: 'MSFT',\n        shareAmount: 7,\n        sharePrice: 300\n      }\n    ],\n    current: null\n  };\n\n  const [state, dispatch] = useReducer(StockReducer, initialState);\n\n  // Add Stock\n  const addStock = stock => {\n    dispatch({\n      type: ADD_STOCK,\n      payload: stock\n    });\n  };\n\n  const updateStock = modifiedStock => {\n    for (var i = 0; i < state.currentStocks.length; i++) {\n      if (modifiedStock.symbol === state.currentStocks[i].symbol) {\n        state.currentStocks[i].shareAmount += Number(modifiedStock.shareAmount);\n        break;\n      }\n    }\n    // Force the rerender of the newly computed # of shares\n    dispatch({\n      type: UPDATE_STOCK\n    });\n  };\n\n  // Helpers\n  // Check if Stock exists\n\n  // Change to for loop\n  const stockExists = symbol => {\n    var flag = false;\n    state.currentStocks.map(stock => {\n      if (symbol === stock.symbol) {\n        flag = true;\n      }\n    });\n    return flag;\n  };\n\n  return (\n    <StockContext.Provider\n      value={{\n        currentCash: state.currentCash,\n        currentStocks: state.currentStocks,\n        addStock,\n        stockExists,\n        updateStock\n      }}\n    >\n      {props.children}\n    </StockContext.Provider>\n  );\n};\n\nexport default StockState;\n"]},"metadata":{},"sourceType":"module"}